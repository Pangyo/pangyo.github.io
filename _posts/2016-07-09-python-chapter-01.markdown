---
layout: post
title:  "Chapter01 - Introduce of Python!"
tags: python
author : gwiyeong.jeong
permalink: /python/chapter01
---

MarkDown Test
------
> This is a paragraph inside
a blockquote.
>
> > This is a nested paragraph
that continues here
> and here
> > and here

~~~~~~~~ python
def factorial(x):
     if x == 0:
         return 1
     else:
         return x * factorial(x - 1)
~~~~~~~~

  * first
  * second
    * second-first
    * second-second

  1. first
  2. second


History
------
<hr/>

파이썬은 1991년[2] 프로그래머인 귀도 반 로섬(Guido van Rossum)이 발표한 고급 프로그래밍 언어로, 플랫폼 독립적이며 인터프리터식, 객체지향적, 동적 타이핑(dynamically typed) 대화형 언어이다.

파이썬이라는 이름은 귀도가 좋아하는 코미디 〈Monty Python's Flying Circus〉에서 따온 것이다.

파이썬은 비영리의 파이썬 소프트웨어 재단이 관리하는 개방형, 공동체 기반 개발 모델을 가지고 있다.

C언어로 구현된 C파이썬 구현이 사실상의 표준이다.
<br/><br/>

개요
-----
<hr/>


파이썬은 초보자부터 전문가까지 사용자층을 보유하고 있다. 동적 타이핑(dynamic typing) 범용 프로그래밍 언어로, 펄 및 루비와 자주 비교된다.

다양한 플랫폼에서 쓸 수 있고, 라이브러리(모듈)가 풍부하여, 대학을 비롯한 여러 교육 기관, 연구 기관 및 산업계에서 이용이 증가하고 있다. 또 파이썬은 순수한 프로그램 언어로서의 기능 외에도 다른 언어로 쓰인 모듈들을 연결하는 풀언어(glue language)로써 자주 이용된다.

실제 파이썬은 많은 상용 응용 프로그램에서 스크립트 언어로 채용되고 있다. 도움말 문서도 정리가 잘 되어 있으며, 유니코드 문자열을 지원해서 다양한 언어의 문자 처리에도 능하다.

구문이 강조된 파이썬 코드 예제
파이썬은 기본적으로 해석기(인터프리터) 위에서 실행될 것을 염두에 두고 설계되었다.

  * 주요 특징
    * 동적 타이핑(dynamic typing). (실행 시간에 자료형을 검사한다.)
    * 객체의 멤버에 무제한으로 접근할 수 있다. (속성이나 전용의 메서드 훅을 만들어 제한할 수는 있음.)
    * 모듈, 클래스, 객체와 같은 언어의 요소가 내부에서 접근할 수 있고, 리플렉션을 이용한 기술을 쓸 수 있다.
  * 해석 프로그램의 종류
    * C파이썬 : C로 작성된 인터프리터.
    * 스택리스 파이썬 : C 스택을 사용하지 않는 인터프리터.
    * 자이썬 : 자바 가상 머신 용 인터프리터. 과거에는 제이파이썬(JPython)이라고 불렸다.
    * IronPython : .NET 플랫폼 용 인터프리터.
    * PyPy : 파이썬으로 작성된 파이썬 인터프리터.
    * 현대의 파이썬은 여전히 인터프리터 언어처럼 동작하나 사용자가 모르는 사이에 스스로 파이썬 소스 코드를 컴파일하여 바이트 코드(Byte code)를 만들어 냄으로써 다음에 수행할 때에는 빠른 속도를 보여 준다.

파이썬에서는 들여쓰기를 사용해서 블록을 구분하는 독특한 문법을 채용하고 있다. 이 문법은 파이썬에 익숙한 사용자나 기존 프로그래밍 언어에서 들여쓰기의 중요성을 높이 평가하는 사용자에게는 잘 받아들여지고 있지만, 다른 언어의 사용자에게서는 프로그래머의 코딩 스타일을 제한한다는 비판도 많다. 이 밖에도 실행 시간에서뿐 아니라 네이티브 이진 파일을 만들어 주는 C/C++ 등의 언어에 비해 수행 속도가 느리다는 단점이 있다. 그러나 사업 분야 등 일반적인 컴퓨터 응용 환경에서는 속도가 그리 중요하지 않고, 빠른 속도를 요하는 프로그램의 경우에도 프로토타이핑한 뒤 빠른 속도가 필요한 부분만 골라서 C 언어 등으로 모듈화할 수 있다(ctypes, SWIG, SIP 등의 래퍼 생성 프로그램들이 많이 있다). 또한 Pyrex, Psyco, NumPy 등을 이용하면 수치를 빠르게 연산할 수 있기 때문에 과학, 공학 분야에서도 많이 이용되고 있다. 점차적인 중요성의 강조로 대한민국에서도 점차 그 활용도가 커지고 있다.
<br/><br/>


파이썬에 영향을 준 언어
-----
<hr/>

  * ABC : 들여쓰기에 의한 블록 구분
  * Modula-2 : 모듈 기능
  * ICON : 사전, 슬라이스 연산자 등
  * SETL : 리스트의 내포 표현
  * C, C++ : 기본적인 문법
  * 스몰토크 : 객체 지향
  * Lisp, 스킴 : 함수형 언어의 특징
<br/><br/>


문법
-----
<hr/>
파이썬의 문법에서 가장 잘 알려진 특징은 들여쓰기를 이용한 블록 구조를 들 수 있다. 이것은 보통 C 등에서 쓰이는 괄호를 이용한 블록 구조를 대신한 것으로 줄마다 처음 오는 공백으로 말미암아 눈에 보이는 블록 구조가 논리적인 제어 구조와 일치하게 하는 방식이다. 아래는 C와 파이썬으로 재귀 호출을 사용한 차례곱을 계산하는 함수를 정의한 것이다.

{% highlight python linenos %}
def factorial(x):
     if x == 0:
         return 1
     else:
         return x * factorial(x - 1)
{% endhighlight %}

{% highlight python linenos %}
def factorial(x):
    return 1 if x==0 else x * factorial(x - 1)
{% endhighlight %}
<br/><br/>
